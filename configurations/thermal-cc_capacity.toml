# Configuration name
name = "thermal-cc_capacity"
# Save path
save_path = "./data"
# Optional: Local backup path
backup_path = "./data/_backup"
# Optional: Action to perform if experiment directory exists
experiment_exists_action = "move" # overwrite, move, halt, update

# Optional: Backup configuration
# [BACKUP]
# user = ""
# host = ""
# ssh_key = ""
# port = ""
# path = ""

# Experiment settings
[EXPERIMENT]
type = "FrequencySweepExperiment"
channel = "Thermal"

[EXPERIMENT.PHASES]
# Frequencies are calculated in the jupyter notebook according to description in the Thermal-CC paper
sweepShortARMv8   = {length_seconds = 120, repetitions = 1, frequencies = [], signal=[-1,0]}
sweepARMv8        = {length_seconds = 120, repetitions = 1, frequencies = [], signal=[-1,0]}
sweepShortHaswell = {length_seconds = 120, repetitions = 1, frequencies = [], signal=[-1,0]}
sweepHaswell      = {length_seconds = 120, repetitions = 1, frequencies = [], signal=[-1,0]}

# Experiment layers
[EXPERIMENT.LAYERS]
rdp = {name = "CoreActivation", params = {}}
io = {name = "TimeValue", params = {timebase='ns'}}

# Experiment general settings
[EXPERIMENT.GENERAL]
latency = 10
fan = true
governors = "userspace"
frequencies = "max"
sampling_period = 1e-3
delay_after_spawn=30.0
delay_after_auxiliary = 1.0
active_wait = false

[EXPERIMENT.GENERAL.ARMv8]
fan = "255"
delay_after_spawn=120.0

# --------------------------------------------------------------------------------------------------
# ENVIRONMENT: Haswell
# Apps and zones
[ENVIRONMENTS.Haswell.APPS]
snk = {executable = "meter_thermal_msr", zone = "host"}
src = {executable = "generator_utilisation_mt", zone = "host"}

# Platform settings -> source
[ENVIRONMENTS.Haswell.src]

# generator
generator.cpu_to_pin = 0
generator.cores = [1,3,5,7]
generator.policy = "round_robin"
generator.priority = 99
generator.worker_priority = 98
generator.start_check_period = 2500

# logging
logging.debug_log_filename = "" # set during execution
logging.app_log_filename = "" # set during execution
logging.log_level = "info"

# schedule reader
schedule_reader.input_file = "" # set during execution
schedule_reader.reading_from_file = true

# Platform settings -> sink
[ENVIRONMENTS.Haswell.snk]

# logging
logging.debug_log_filename = "" # set during execution
logging.app_log_filename = "" # set during execution
logging.log_level = "info"

thermal_msr.cores = [0, 2, 4, 6]
thermal_msr.package = false

# host
host.period = 1e-3
host.policy = "round_robin"
host.pinning = 0
host.priority = 90
host.log_header = true
host.start_immediately = false
host.start_check_period = 2500

# --------------------------------------------------------------------------------------------------
# ENVIRONMENT: Haswell_2
# Apps and zones
[ENVIRONMENTS."Haswell_2".APPS]
snk = {executable = "meter_thermal_msr", zone = "host"}
src = {executable = "generator_utilisation_mt", zone = "host"}

# Platform settings -> source
[ENVIRONMENTS."Haswell_2".src]

# generator
generator.cpu_to_pin = 0
generator.cores = [1,3,5,7]
generator.policy = "round_robin"
generator.priority = 99
generator.worker_priority = 98
generator.start_check_period = 2500

# logging
logging.debug_log_filename = "" # set during execution
logging.app_log_filename = "" # set during execution
logging.log_level = "info"

# schedule reader
schedule_reader.input_file = "" # set during execution
schedule_reader.reading_from_file = true

# Platform settings -> sink
[ENVIRONMENTS."Haswell_2".snk]

# logging
logging.debug_log_filename = "" # set during execution
logging.app_log_filename = "" # set during execution
logging.log_level = "info"

thermal_msr.cores = [0, 2, 4, 6]
thermal_msr.package = false

# host
host.period = 1e-3
host.policy = "round_robin"
host.pinning = 0
host.priority = 90
host.log_header = true
host.start_immediately = false
host.start_check_period = 2500

# --------------------------------------------------------------------------------------------------
# ENVIRONMENT: Haswell_3
# Apps and zones
[ENVIRONMENTS."Haswell_3".APPS]
snk = {executable = "meter_thermal_msr", zone = "host"}
src = {executable = "generator_utilisation_mt", zone = "host"}

# Platform settings -> source
[ENVIRONMENTS."Haswell_3".src]

# generator
generator.cpu_to_pin = 0
generator.cores = [1,3,5,7]
generator.policy = "round_robin"
generator.priority = 99
generator.worker_priority = 98
generator.start_check_period = 2500

# logging
logging.debug_log_filename = "" # set during execution
logging.app_log_filename = "" # set during execution
logging.log_level = "info"

# schedule reader
schedule_reader.input_file = "" # set during execution
schedule_reader.reading_from_file = true

# Platform settings -> sink
[ENVIRONMENTS."Haswell_3".snk]

# logging
logging.debug_log_filename = "" # set during execution
logging.app_log_filename = "" # set during execution
logging.log_level = "info"

thermal_msr.cores = [0, 2, 4, 6]
thermal_msr.package = false

# host
host.period = 1e-3
host.policy = "round_robin"
host.pinning = 0
host.priority = 90
host.log_header = true
host.start_immediately = false
host.start_check_period = 2500

# --------------------------------------------------------------------------------------------------
# ENVIRONMENT: ARMv8
# Apps and zones
[ENVIRONMENTS.ARMv8.APPS]
snk = {executable = "meter_thermal_sysfs", zone = "combined"}
src = {executable = "generator_utilisation_mt", zone = "combined"}

# Platform settings -> source
[ENVIRONMENTS.ARMv8.src]

# generator
generator.cpu_to_pin = 5
generator.cores = [0,1,2,3,4]
generator.policy = "round_robin"
generator.priority = 99
generator.worker_priority = 98
generator.start_check_period = 2500

# logging
logging.debug_log_filename = "" # set during execution
logging.app_log_filename = "" # set during execution
logging.log_level = "info"

# schedule reader
schedule_reader.input_file = "" # set during execution
schedule_reader.reading_from_file = true

# Platform settings -> sink
[ENVIRONMENTS.ARMv8.snk]

# logging
logging.debug_log_filename = "" # set during execution
logging.app_log_filename = "" # set during execution
logging.log_level = "info"

thermal_sysfs.zones = [0, 1, 2, 3, 4, 5, 6, 7]
#thermal_sysfs.zones = [0]

# host
host.period = 1e-3
host.policy = "round_robin"
host.pinning = 5
#host.pinning = 0
host.priority = 90
host.log_header = true
host.start_immediately = false
host.start_check_period = 2500

